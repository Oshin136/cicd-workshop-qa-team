name: Frontend Deployment
on:
  push:
    branches:
        - team3-oshin


jobs:
  deploy:
    name: Deploy Frontend
    runs-on: ubuntu-latest


    steps:

    - name: Checkout Code
      uses: actions/checkout@v4


    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20

    - name: Install Frontend dependencies
      run: |
        cd frontend
        npm install

    - name: Build Frontend
      run: |
        cd frontend
        npm run build
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1


    - name: Deploy to S3
      run: |
        aws s3 sync frontend/build/ s3://${{ vars.S3_BUCKET_NAME }} --delete


    - name: Cloudfront Invalidation
      run: aws cloudfront create-invalidation --distribution-id ${{vars.CLOUDFRONT_DISTRIBUTION_ID}} --paths "/*"

  cypress_run:
    name: Run e2e Test
    runs-on: ubuntu-latest
    needs: deploy
    if: ${{ success() }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: |
          cd frontend
          npm install

      - name: Run Cypress tests
        run: |
          cd e2e-tests
          npm install
          npx cypress run
        env:
          CYPRESS_BASE_URL: ${{ vars.FRONTEND_URL }}
          CYPRESS_apiUrl: ${{ vars.BACKEND_URL }}


  # slack_notification:
  #   name: Send Slack Notification using App
  #   runs-on: ubuntu-latest
  #   needs: deploy
  #   if: always()
    
  #   steps:
  #     - name: Send Slack Notification
  #       uses: slackapi/slack-github-action@v1.25.0
  #       with:
  #         channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
  #         slack-message: ✅Deployment completed successfully!
  #       env:
  #         SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}



  slack_notification:
    name: Send Slack Notification
    runs-on: ubuntu-latest
    needs: deploy
    if: always()

    steps:
      - name: Send Slack Notification via Webhook 
        if: ${{ needs.deploy.result == 'success' }}
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"✅ *Frontend Deployment Successful* "}' \
          $SLACK_WEBHOOK_URL
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Send Slack Notification via Webhook (Failure)
        if: ${{ needs.deploy.result == 'failure' }}
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"❌ *Frontend Deployment Failed* "}' \
          $SLACK_WEBHOOK_URL
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}





   
